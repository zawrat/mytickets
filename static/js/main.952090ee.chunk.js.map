{"version":3,"sources":["Ticket.js","TicketList.js","tickets.js","App.js","serviceWorker.js","index.js"],"names":["Ticket","flipButton","undefined","this","props","data","imageBack","type","className","onClick","flippy","toggle","src","flipOnHover","flipOnClick","flipDirection","ref","r","alt","imageFront","Component","TicketList","tickets","map","ticket","key","id","price","currency","city","country","series","year","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAuCeA,E,YAlCX,aAAe,uE,sEAIL,IAEFC,EAFC,OAUL,YATmDC,IAA9BC,KAAKC,MAAMC,KAAKC,WAAyD,KAA9BH,KAAKC,MAAMC,KAAKC,YAI5EL,EAAa,4BAAQM,KAAK,SAC1BC,UAAU,2EACVC,QAAS,kBAAM,EAAKC,OAAOC,WAAU,yBAAKC,IAAI,6BAI9C,yBAAKJ,UAAU,WACX,kBAAC,IAAD,CAAQK,aAAa,EACjBC,aAAa,EACbC,cAAc,aACdC,IAAK,SAACC,GAAD,OAAO,EAAKP,OAASO,IAC1B,kBAAC,YAAD,CAAWT,UAAU,oBACjB,yBAAKU,IAAI,GAAGN,IAAKT,KAAKC,MAAMC,KAAKc,aAChClB,GAEL,kBAAC,WAAD,CAAUO,UAAU,oBAChB,yBAAKU,IAAI,GAAGN,IAAKT,KAAKC,MAAMC,KAAKC,YAChCL,S,GA3BJmB,aCcNC,MAff,YAAkC,IAAZC,EAAW,EAAXA,QACpB,OACE,6BACI,mDAGIA,EAAQC,KAAI,SAAAC,GACR,OAAO,kBAAC,EAAD,CAAQnB,KAASmB,EAASC,IAAQD,EAAOE,UCVnDJ,EAAU,CACnB,CACEI,GAAI,EACJC,MAAO,IACPC,SAAU,MACVC,KAAM,oBACNC,QAAS,SACTX,WAAY,4BACZb,UAAW,iCACXyB,OAAQ,IACRxB,KAAM,OACNyB,KAAM,MAMR,CACIN,GAAI,EACJC,MAAO,IACPC,SAAU,MACVC,KAAM,oBACNC,QAAS,SACTX,WAAY,6BAEd,CACEO,GAAI,EACJC,MAAO,IACPC,SAAU,MACVC,KAAM,oBACNC,QAAS,SACTX,WAAY,6BAEd,CACEO,GAAI,EACJC,MAAO,IACPC,SAAU,MACVC,KAAM,oBACNC,QAAS,SACTX,WAAY,6BAEd,CACEO,GAAI,EACJC,MAAO,EACPC,SAAU,MACVC,KAAM,oBACNC,QAAS,SACTX,WAAY,6BAEd,CACEO,GAAI,EACJC,MAAO,EACPC,SAAU,MACVC,KAAM,oBACNC,QAAS,SACTX,WAAY,6BAEd,CACEO,GAAI,EACJC,MAAO,EACPC,SAAU,MACVC,KAAM,oBACNC,QAAS,SACTX,WAAY,6BAEd,CACEO,GAAI,EACJC,MAAO,EACPC,SAAU,MACVC,KAAM,oBACNC,QAAS,SACTX,WAAY,6BAEd,CACEO,GAAI,EACJC,MAAO,EACPC,SAAU,MACVC,KAAM,oBACNC,QAAS,SACTX,WAAY,6BAEd,CACEO,GAAI,GACJC,MAAO,EACPC,SAAU,MACVC,KAAM,oBACNC,QAAS,SACTX,WAAY,6BAEd,CACEO,GAAI,GACJC,MAAO,EACPC,SAAU,MACVC,KAAM,oBACNC,QAAS,SACTX,WAAY,8BClFLc,MARf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,CAAYc,QAAYA,MCIVY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.952090ee.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Flippy, { FrontSide, BackSide } from 'react-flippy';\r\n\r\n// TODO make it functional again???\r\nclass Ticket extends Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        const hasBackImage = this.props.data.imageBack !== undefined && this.props.data.imageBack !== '';\r\n        let flipButton;\r\n\r\n        if (hasBackImage) {\r\n            flipButton = <button type=\"button\"\r\n            className='absolute right-0 bottom-0 bg-transparent grow-large bn outline-0 pointer'\r\n            onClick={() => this.flippy.toggle()}><img src='assets/rotate_icon.png'></img></button>;\r\n        }\r\n\r\n        return (\r\n            <div className='dib ma3'>\r\n                <Flippy flipOnHover={false}\r\n                    flipOnClick={false}\r\n                    flipDirection=\"horizontal\"\r\n                    ref={(r) => this.flippy = r}>\r\n                    <FrontSide className='shadow-5 br3 pa0'>\r\n                        <img alt='' src={this.props.data.imageFront}></img>\r\n                        {flipButton}\r\n                    </FrontSide>\r\n                    <BackSide className='shadow-5 br3 pa0'>\r\n                        <img alt='' src={this.props.data.imageBack}></img>\r\n                        {flipButton}\r\n                    </BackSide>\r\n                </Flippy>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ticket;\r\n","import React from 'react';\r\nimport Ticket from './Ticket'\r\n\r\nfunction TicketList( {tickets} ) {\r\n  return (\r\n    <div>\r\n        <h1>This is ticket list</h1>\r\n\r\n        {\r\n            tickets.map(ticket => {\r\n                return <Ticket data = { ticket } key = { ticket.id }/>;\r\n            })\r\n        }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TicketList;\r\n","export const tickets = [\r\n    {\r\n      id: 1,\r\n      price: 2.6,\r\n      currency: \"PLN\",\r\n      city: 'Łódź',\r\n      country: 'Polska',\r\n      imageFront: 'assets/260-zł-11.jpg',\r\n      imageBack: 'assets/260-zł-11_back.jpg',\r\n      series: 'D',\r\n      type: 'time',// time / day / month\r\n      year: 2019\r\n      // time duration\r\n      // na wymiane\r\n      // normalny / ulgowy\r\n      // jednorazowy / okresowy\r\n    },\r\n    {\r\n        id: 2,\r\n        price: 2.7,\r\n        currency: \"PLN\",\r\n        city: 'Łódź',\r\n        country: 'Polska',\r\n        imageFront: 'assets/260-zł-11.jpg'\r\n      },\r\n      {\r\n        id: 3,\r\n        price: 2.8,\r\n        currency: \"PLN\",\r\n        city: 'Łódź',\r\n        country: 'Polska',\r\n        imageFront: 'assets/260-zł-11.jpg'\r\n      },\r\n      {\r\n        id: 4,\r\n        price: 2.9,\r\n        currency: \"PLN\",\r\n        city: 'Łódź',\r\n        country: 'Polska',\r\n        imageFront: 'assets/260-zł-11.jpg'\r\n      },\r\n      {\r\n        id: 5,\r\n        price: 3.0,\r\n        currency: \"PLN\",\r\n        city: 'Łódź',\r\n        country: 'Polska',\r\n        imageFront: 'assets/260-zł-11.jpg'\r\n      },\r\n      {\r\n        id: 6,\r\n        price: 3.0,\r\n        currency: \"PLN\",\r\n        city: 'Łódź',\r\n        country: 'Polska',\r\n        imageFront: 'assets/260-zł-11.jpg'\r\n      },\r\n      {\r\n        id: 7,\r\n        price: 3.0,\r\n        currency: \"PLN\",\r\n        city: 'Łódź',\r\n        country: 'Polska',\r\n        imageFront: 'assets/260-zł-11.jpg'\r\n      },\r\n      {\r\n        id: 8,\r\n        price: 3.0,\r\n        currency: \"PLN\",\r\n        city: 'Łódź',\r\n        country: 'Polska',\r\n        imageFront: 'assets/260-zł-11.jpg'\r\n      },\r\n      {\r\n        id: 9,\r\n        price: 3.0,\r\n        currency: \"PLN\",\r\n        city: 'Łódź',\r\n        country: 'Polska',\r\n        imageFront: 'assets/260-zł-11.jpg'\r\n      },\r\n      {\r\n        id: 10,\r\n        price: 3.0,\r\n        currency: \"PLN\",\r\n        city: 'Łódź',\r\n        country: 'Polska',\r\n        imageFront: 'assets/260-zł-11.jpg'\r\n      },\r\n      {\r\n        id: 11,\r\n        price: 3.0,\r\n        currency: \"PLN\",\r\n        city: 'Łódź',\r\n        country: 'Polska',\r\n        imageFront: 'assets/260-zł-11.jpg'\r\n      }\r\n  ];\r\n  ","import React from 'react';\nimport './App.css';\nimport TicketList from './TicketList'\nimport { tickets } from './tickets'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TicketList tickets = { tickets }/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}